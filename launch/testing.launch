<?xml version="1.0" encoding="utf-8"?>
<launch>
	<rosparam file="$(find robot_and_sensor_hw)/config/robot_and_sensor_hw.yaml" command="load" />
	<rosparam file="$(find robot_and_sensor_hw)/config/controllers.yaml" command="load" />
	<rosparam file="$(find robot_and_sensor_hw)/config/kuka_controller_joint_names.yaml" command="load" />
	<rosparam file="$(find robot_and_sensor_hw)/config/kuka_rsi_params.yaml" command="load" />
<!-- 	<rosparam file="$(find robot_and_sensor_hw)/config/r5_params_fts.yaml" command="load"/> -->
<!-- 	<rosparam command="load" ns="GravityCompensation/params" file="$(find robot_and_sensor_hw)/config/r5_gravity.yaml"/> -->
<!-- 	<rosparam command="load" ns="Calibration/Offset" file="$(find robot_and_sensor_hw)/config/sensor_offset.yaml"/> -->
<!-- 	<rosparam file="$(find robot_and_sensor_hw)/config/r5_ftc_sensor_configuration.yaml" command="load" /> -->
	
  <arg name="moveit" default="false" />
  <arg name="robot" default="r5" />
  <arg name="scenario" default="" />
  <arg name="scenario_parameters" default="" />
	
	<node name="teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py">
    <rosparam command="load" file="$(find robot_and_sensor_hw)/config/teleop_sim.yaml"/>
  </node>
	
	<param name="robot_description" command="$(find xacro)/xacro --inorder '$(find robot_and_sensor_hw)/urdf/r5_fts.urdf.xacro'"/>
  <param name="robot_description_semantic" textfile="$(find robot_and_sensor_hw)/urdf/r5.srdf" />
	
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    <param name="ignore_timestamp" type="bool" value="true"/>
  </node>
	
	<node name='kuka_rsi_simulator' pkg='kuka_rsi_simulator' type="kuka_rsi_simulator" args="127.0.0.1 49152" />
	
	<node name="test" pkg="robot_and_sensor_hw" type="testing_dummy_app" respawn="false" output="screen">
		<remap from="/cmd_force" to="/cmd_vel" />
	</node>
	
	<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
			 args="joint_state_controller force_torque_sensor_controller my_controller"/>
	<!--<node name="controller_loader" pkg="controller_manager" type="controller_manager" respawn="false" output="screen"
        args="load my_controller"/>-->
	
	<group>
      <node name="iirob_kuka_visualization" pkg="rviz" type="rviz" args="-d $(find iirob_kuka_bringup)/rviz/iirob_kuka$(arg scenario).rviz" required="true" />
<!--       <node name="iirob_kuka_controller_gui" pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller" /> -->
<!--       <node name="iirob_kuka_controller_manager_gui" pkg="rqt_controller_manager" type="rqt_controller_manager" /> -->
  </group>
	
</launch>
